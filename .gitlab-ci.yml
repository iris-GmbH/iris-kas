# SPDX-License-Identifier: MIT
# Copyright (C) 2022 iris-GmbH infrared & intelligent sensors


#####################
### INCLUDE FILES ###
#####################

include:
  - ".gitlab/common-template.yml"
  - ".gitlab/release-template.yml"
  - ".gitlab/develop-template.yml"

###############################
### CI VARIABLE DEFINITIONS ###
###############################

variables:
  RELEASE_BRANCH: "master"
  BUILD_VERSION_TAG: "latest"
  BUILD_IMAGE: "${CI_REGISTRY_IMAGE}:${BUILD_VERSION_TAG}"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}"
  # use premirrors for cloning thirdparty meta layers. Reduces external traffic and improves download speed
  KAS_PREMIRRORS: "^https?://[^/]*(?:/.*)?/([^/]*?)(?:\\.git)?$ http://gitlab-webservice-default.gitlab:8181/MIRROR/\\1.git"
  MAIN_KAS_FILES: "kas-irma6-base-deploy.yml:kas-irma6-pa.yml:include/ci/kas-ci-common.yml"
  SSTATE_CACHE: "/mnt/yocto-sstate-cache"
  SSTATE_CACHE_RELEASE: "/mnt/yocto-sstate-cache-release"
  DOWNLOAD_MIRROR: "/mnt/yocto-download-mirror"
  ICECREAM_NETNAME: "ICECREAM"
  RUN_MAINTENANCE: "false"
  WIPE_SSTATE_CACHE: "false"
  FAILURE_LOG_DIR: "failure-log"
  JOB_ARTIFACT: "build/tmp/deploy"
  # Refspec of the systemtest_base repo to use
  SYSTEMTEST_BASE: "0b32bbc835af29139752847437a22e42d291de49"
  # Set the name of the firmware to be programmed with systemtest_smoke job
  SYSTEMTEST_SW_NAME: "sc573-gen6"
  # Set duration of systemtest_reliability job in seconds
  SYSTEMTEST_RELIABILITY_DURATION: "21600"
  SYSTEMTEST_DOCKER_REG_USER: $SYSTEMTEST_DOCKER_REG_USER
  SYSTEMTEST_DOCKER_REG_TOKEN: $SYSTEMTEST_DOCKER_REG_TOKEN
  GEN6_TOOLS_DOCKER_REG_USER: $GEN6_TOOLS_DOCKER_REG_USER
  GEN6_TOOLS_DOCKER_REG_TOKEN: $GEN6_TOOLS_DOCKER_REG_TOKEN
  IMX8MP_IRMA6R2_DEPLOY: irma6-${CI_COMMIT_TAG}-imx8mp-irma6r2-deploy
  IMX8MP_IRMA6R2_DEPLOY_CUSTOMER: irma6-${CI_COMMIT_TAG}-imx8mp-irma6r2-deploy-customer
  IMX8MP_IRMA6R2_DEV_DEPLOY: irma6-${CI_COMMIT_TAG}-imx8mp-irma6r2-dev-deploy
  IMX8MP_IRMA6R2_MAINTENANCE_DISTROS: irma6-${CI_COMMIT_TAG}-imx8mp-irma6r2-maintenance-distros
  IMX8MP_IRMA6R2_SDK: irma6-${CI_COMMIT_TAG}-imx8mp-irma6r2-sdk
  IMX8MP_IRMA6R2_BASESOURCES: imx8mp-irma6r2-base-sources
  SC573_GEN6_DEPLOY: irma6-${CI_COMMIT_TAG}-sc573-gen6-deploy
  SC573_GEN6_DEPLOY_CUSTOMER: irma6-${CI_COMMIT_TAG}-sc573-gen6-deploy-customer
  SC573_GEN6_MAINTENANCE_DISTROS: irma6-${CI_COMMIT_TAG}-sc573-gen6-maintenance-distros
  SC573_GEN6_SDK: irma6-${CI_COMMIT_TAG}-sc573-gen6-sdk
  SC573_GEN6_BASESOURCES: sc573-gen6-base-sources
  RENOVATE_PLATFORM: "gitlab"
  RENOVATE_ENDPOINT: "${CI_API_V4_URL}"
  RENOVATE_REPOSITORIES: "[ \"${CI_PROJECT_PATH}\" ]"
  RENOVATE_REVIEWERS: "[ \"${GITLAB_USER_LOGIN}\" ]"
  RENOVATE_PR_CONCURRENT_LIMIT: "0"
  RENOVATE_PR_HOURLY_LIMIT: "0"
  # Set extra flags for the renovate bot
  RENOVATE_EXTRA_FLAGS: ""
  RENOVATE_DRY_RUN: "false"
  SKIP_SDK_BUILD:
    value: "true"
    description: 'Set to "false" to run the SDK build.'
  USE_IDENTICAL_NAMED_LAYER_BRANCHES:
    value: "true"
    description: 'Set to "true" to use identical named meta layer branches during the build'
  SKIP_DEPLOY_TARGET_BUILD:
    value: "false"
    description: 'Set to "true" to skip the deploy firmware build for the sensor targets.'
  SKIP_MAINTENANCE_TARGET_BUILD:
    value: "false"
    description: 'Set to "true" to skip the maintenance firmware build for the sensor targets.'
  SKIP_OCI_TESTS:
    value: "false"
    description: 'Set to "true" to skip the OCI tests.'
  FORCE_CONTAINER_BUILD:
    value: "false"
    description: 'Set to "true" to force (re-)build the iris-kas build container on the current branch.'
  SKIP_SYSTEMTEST_SMOKE:
    value: "true"
    description: 'Set to "false" to add execution of systemtest_smoke job. Skipping system smoke test will also skip any additional Systemtests.'
  SKIP_SYSTEMTEST_RELIABILITY:
    value: "true"
    description: 'Set to "false" to add execution of systemtest_reliability job.'
  BUILD_FROM_SCRATCH:
    value: "false"
    description: 'Set to "true" to build from scratch.'


####################
### YAML ANCHORS ###
####################

.target_multi_confs: &target_multi_confs
  MULTI_CONF: [sc573-gen6, imx8mp-irma6r2]

.oci_multi_confs: &oci_multi_confs
  MULTI_CONF: [qemux86-64-r1, qemux86-64-r2]

################
### WORKFLOW ###
################

workflow:
  rules:
    # Do not run merge pipeline on draft MRs
    - if: '$CI_MERGE_REQUEST_TITLE =~ /^Draft:/'
      when: never
    # Automatic build on default branch
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    # Allow scheduled builds
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    # Allow manually triggering a build from the webinterface
    - if: '$CI_PIPELINE_SOURCE == "web"'
    # Allow triggering from upstream pipeline
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    # Automatic build on merge request/changes to merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Trigger an automatic build if a new, valid tag is pushed.
    # examples for valid tags:
    # 1.0.1, 1.0.1-RC1, 1.0.1-support-release
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+(-.+)?/'


########################
### DEFAULT SETTINGS ###
########################

default:
  image: "${BUILD_IMAGE}"
  before_script:
    # Ensure correct ownership of mounted EFS volumes
    - sudo chown builder:builder ${SSTATE_CACHE} ${SSTATE_CACHE_RELEASE} ${DOWNLOAD_MIRROR}
  tags:
    # run on gitlab runners designed for kas builds
    - kas


##############
### STAGES ###
##############

stages:
  - renovate
  - setup
  - build-build-container
  - merge-build-container
  - yocto-setup
  - release-sanity-checks
  - wipe-sstate-caches
  - build
  - push-test-image
  - test
  - reliability-test
  - upload-artifacts
  - release

renovate-dry-run:
  stage: renovate
  rules:
    - if: $RENOVATE_DRY_RUN == "true"
  image: renovate/renovate:35.32.2
  tags:
    - gp
  before_script: []
  script:
    - renovate --dry-run=full ${RENOVATE_EXTRA_FLAGS}
  allow_failure: true

renovate:
  stage: renovate
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  image: renovate/renovate:35.32.2
  tags:
    - gp
  before_script: []
  script:
    - renovate ${RENOVATE_EXTRA_FLAGS}


###################
### SETUP STAGE ###
###################

# We do not want to run a pipeline on merges to non-default branch.
# During a release process (merge target branch master), we are interested in the release candidate builds, not the merge request
# builds, as the development and release pipelines work fundamentally different.
# However, since a merge request is blocked regardless of branch, as long as no pipeline is run, we need a empty placeholder
# job for the pipeline to "turn green".
skip-non-default-branch-merge-pipeline:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH'
  stage: setup
  tags:
    - gp
  before_script: []
  script:
    - echo "Running empty pipeline on merge request targeting release branch ${RELEASE_BRANCH}"

build-container-get-tag:
  rules:
    - !reference [.common_template, rules, build_container_rules]
  stage: setup
  tags:
    - gp
  image:
    name: alpine:3.17
  before_script: []
  script:
    # Default branch = latest tag
    # Release = release tag
    # All other branches are tagged with the currently built commit SHA hash
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        BUILD_VERSION_TAG="latest"
      elif [[ -n "$CI_COMMIT_TAG" ]]; then
        BUILD_VERSION_TAG="$CI_COMMIT_TAG"
      else
        BUILD_VERSION_TAG="git-${CI_COMMIT_SHORT_SHA}"
      fi
    - echo "BUILD_VERSION_TAG set to ${BUILD_VERSION_TAG}."
    - echo "BUILD_VERSION_TAG=${BUILD_VERSION_TAG}" >> build.env
  artifacts:
    reports:
      dotenv: build.env


###################################
### BUILD BUILD CONTAINER STAGE ###
###################################

build-iris-kas-container:
  stage: build-build-container
  rules:
    - !reference [.common_template, rules, build_container_rules]
  parallel:
    matrix:
      - TAG: gp
        ARCH: amd64
      - TAG: gp-arm
        ARCH: arm64
  tags:
    - ${TAG}
  image:
    name: gcr.io/kaniko-project/executor:v1.9.2-debug
    entrypoint: [""]
  before_script: []
  script:
    - >-
      /kaniko/executor
      --build-arg "type=ci"
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${BUILD_IMAGE}-${ARCH}"


###################################
### MERGE BUILD CONTAINER STAGE ###
###################################

merge-container-manifests:
  stage: merge-build-container
  tags:
    - gp
  rules:
    - !reference [.common_template, rules, build_container_rules]
  image:
    name: mplatform/manifest-tool:alpine-v2.0.6
  before_script: []
  script:
    - >-
      manifest-tool
      --username=${CI_REGISTRY_USER}
      --password=${CI_REGISTRY_PASSWORD}
      push from-args
      --platforms linux/amd64,linux/arm64
      --template ${BUILD_IMAGE}-ARCH
      --target ${BUILD_IMAGE}


#########################
### YOCTO SETUP STAGE ###
#########################

# Under certain circumstances a mirror item may fail due to invalid checksums.
# Unfortunately, yocto does not automatically remove these
# which in the worst case may lead to significant longer build times.
download-mirror-maintenance:
  stage: yocto-setup
  rules:
    - if: '$RUN_MAINTENANCE == "true"'
  script:
    - echo "Finding and deleting faulty mirror items..."
    - find "${DOWNLOAD_MIRROR}" -name '*bad-checksum*' -exec sh -c 'echo "Found faulty mirror item {}. Deleting..."; rm -f {} $(echo {} | sed -r "s/_bad-checksum.*/.done/g")' \;
    - echo "Done"


###################################
### RELEASE SANITY CHECKS STAGE ###
###################################

# Ensures that fixed refspecs are set for all meta-layers.
# This is vital for build reproducibility.
release-verify-fixed-refspecs:
  rules:
    - !reference [.release_template, rules]
  stage: release-sanity-checks
  script:
    - echo "Ensuring that fixed refspecs are set on meta layers..."
    - >
      kas for-all-repos --update ${MAIN_KAS_FILES} """
      if [ \"\${KAS_REPO_NAME}\" != \"this\" ]; then
        git checkout \${KAS_REPO_REFSPEC} \
        && git rev-parse --abbrev-ref HEAD | grep -qE \"^HEAD\\s*$\" \
        || { echo \"Error. Non-fixed refspec detected in repo \${KAS_REPO_NAME}. Please set to a git commit hash or tag for a release build\"; exit 1; }; fi
      """

# Ensures that the DISTRO_VERSION variable is set correctly
release-verify-distro-version:
  rules:
    - !reference [.release_template, rules]
  stage: release-sanity-checks
  script:
    - export $(kas shell -c "bitbake -e" ${MAIN_KAS_FILES} | grep IRMA6_DISTRO_VERSION | tail -n 1)
    - >
      if test "${IRMA6_DISTRO_VERSION}" != "\"${CI_COMMIT_TAG}\""; then
        echo "Error. IRMA6_DISTRO_VERSION ${IRMA6_DISTRO_VERSION} defined in the kas config does not match the current git tag \"${CI_COMMIT_TAG}\"."
        exit 1
      fi


################################
### WIPE SSTATE CACHES STAGE ###
################################

wipe-sstate-caches:
  stage: wipe-sstate-caches
  rules:
    - if: '$WIPE_SSTATE_CACHE == "true"'
  script:
    - find ${SSTATE_CACHE} ${SSTATE_CACHE_RELEASE} -mindepth 1 -exec rm -rfv {} +

# Ensures that the release sstate cache is empty before any build is started.
# This ensures the release is built from scratch (build reproducibility).
release-wipe-release-sstate-cache:
  rules:
    - !reference [.release_template, rules]
  stage: wipe-sstate-caches
  script:
    - echo "Making sure that the release sstate cache is wiped in preparation for the release build"
    - find ${SSTATE_CACHE_RELEASE} -mindepth 1 -delete


###################
### BUILD STAGE ###
###################

develop-build-maintenance-distro-targets:
  rules:
    # skip if SKIP_MAINTENANCE_TARGET_BUILD is set to true
    - if: '$SKIP_MAINTENANCE_TARGET_BUILD == "true"'
      when: never
    - !reference [.develop_template, rules]
  stage: build
  parallel:
    matrix:
      - <<: *target_multi_confs
        MAIN_KAS_FILES: "kas-irma6-base-maintenance.yml:kas-irma6-pa.yml:include/ci/kas-ci-common.yml"
        IMAGES: "irma6-maintenance irma6-dev"
  variables:
    ARTIFACT_SUFFIX: "-maintenance-distros"
  services:
    - !reference [.common_template, services, icecc-daemon]
  script:
    - !reference [.common_template, script, generate-build-targets-target]
    - !reference [.develop_template, script, build-configuration]
    - !reference [.develop_template, script, build]
  after_script:
    - !reference [.common_template, after_script, remove-symbolic-image-links]
    - !reference [.develop_template, after_script, move-artifacts-to-toplevel]
  artifacts: !reference [.develop_template, artifacts, develop-artifacts]

develop-build-deploy-distro-targets:
  rules:
    # skip if SKIP_DEPLOY_TARGET_BUILD is set to true
    - if: '$SKIP_DEPLOY_TARGET_BUILD == "true"'
      when: never
    - !reference [.develop_template, rules]
  stage: build
  parallel:
    matrix:
      - <<: *target_multi_confs
        IMAGES: "irma6-deploy"
  variables:
    ARTIFACT_SUFFIX: "-deploy"
  services:
    - !reference [.common_template, services, icecc-daemon]
  script:
    - !reference [.common_template, script, generate-build-targets-target]
    - !reference [.develop_template, script, build-configuration]
    - !reference [.develop_template, script, build]
  after_script:
    - !reference [.common_template, after_script, remove-symbolic-image-links]
    - !reference [.develop_template, after_script, move-artifacts-to-toplevel]
  artifacts: !reference [.develop_template, artifacts, develop-artifacts]

develop-build-oci:
  rules:
    # skip if SKIP_OCI_TESTS are set to true
    - if: '$SKIP_OCI_TESTS == "true"'
      when: never
    - !reference [.develop_template, rules]
  stage: build
  parallel:
    matrix:
      - <<: *oci_multi_confs
        IMAGES: irma6-test
        MAIN_KAS_FILES: "kas-irma6-base-maintenance.yml:kas-irma6-pa.yml:include/ci/kas-ci-common.yml"
  variables:
    JOB_ARTIFACT: "build/tmp/deploy/images/*/*.rootfs-oci"
    ARTIFACT_SUFFIX: ".rootfs-oci"
  services:
    - !reference [.common_template, services, icecc-daemon]
  script:
    - !reference [.common_template, script, generate-build-targets-other]
    - !reference [.develop_template, script, build-configuration]
    - !reference [.develop_template, script, build]
  after_script:
    - !reference [.develop_template, after_script, move-artifacts-to-toplevel]
  artifacts: !reference [.develop_template, artifacts, develop-artifacts]

develop-build-sdk:
  rules:
    # skip if SKIP_SDK_BUILD is set to true
    - if: '$SKIP_SDK_BUILD == "true"'
      when: never
    - !reference [.develop_template, rules]
  stage: build
  variables:
    BITBAKE_TASK: "-c populate_sdk"
    ARTIFACT_SUFFIX: "-sdk"
  parallel:
    matrix:
      - <<: *target_multi_confs
        IMAGES: "irma6-maintenance"
        MAIN_KAS_FILES: "kas-irma6-base-maintenance.yml:kas-irma6-pa.yml:include/ci/kas-ci-common.yml"
  services:
    - !reference [.common_template, services, icecc-daemon]
  script:
    - !reference [.common_template, script, generate-build-targets-other]
    - !reference [.develop_template, script, build-configuration]
    - !reference [.develop_template, script, build]
  after_script:
    - !reference [.develop_template, after_script, move-artifacts-to-toplevel]
  artifacts: !reference [.develop_template, artifacts, develop-artifacts]

# We prepare an offline-build environment for building the irma6-base image.
# This image contains the raw iris-poky-deploy distro without any proprietary software.
# After a test build, this build environment is saved for license compliance.
release-base-build:
  rules:
    - !reference [.release_template, rules]
  stage: build
  tags:
    - "iris-kas-release-s3-upload"
  parallel:
    matrix:
      - <<: *target_multi_confs
        IMAGES: "irma6-base"
  variables:
    MAIN_KAS_FILES: "kas-irma6-base-deploy.yml:include/ci/kas-ci-common.yml"
    S3_BUCKET_NAME: "iris-devops-opensource-iris-sensing-com"
    S3_PATH_PREFIX: "sources/${CI_COMMIT_TAG}/"
    S3_STORAGE_CLASS: "STANDARD_IA"
    S3_ACL: "public-read"
    ARTIFACT_SUFFIX: "-base-sources"
  services:
    - !reference [.common_template, services, icecc-daemon]
  script:
    - !reference [.common_template, script, generate-build-targets-other]
    - !reference [.release_template, script, populate-dl-cache]
    - !reference [.release_template, script, populate-dl-dir]
    - ARTIFACT_NAME="${MULTI_CONF}-base-sources"
    - !reference [.release_template, script, create-artifact-archive]
    # verify reproducibility of offline build
    - !reference [.release_template, script, offline-build]
    # upload base sources to public s3 bucket
    - !reference [.release_template, script, s3-upload-sources]
    - echo "BASE_SOURCES_S3_BUCKET_NAME=$S3_BUCKET_NAME" >> build.env
    - echo "BASE_SOURCES_S3_PATH_PREFIX=$S3_PATH_PREFIX" >> build.env
  artifacts:
    reports:
      dotenv: build.env

# Build the maintenance release artifacts
release-build-maintenance-distros:
  rules:
    - !reference [.release_template, rules]
  stage: build
  parallel:
    matrix:
      - <<: *target_multi_confs
        IMAGES: "irma6-maintenance irma6-dev"
        MAIN_KAS_FILES: "kas-irma6-base-maintenance.yml:kas-irma6-pa.yml:include/ci/kas-ci-common.yml"
  variables:
    ARTIFACT_SUFFIX: "-maintenance-distros"
  services:
    - !reference [.common_template, services, icecc-daemon]
  script:
    - !reference [.common_template, script, generate-build-targets-target]
    - !reference [.release_template, script, populate-dl-cache]
    - !reference [.release_template, script, populate-dl-dir]
    - !reference [.release_template, script, build]
  after_script:
    - !reference [.common_template, after_script, remove-symbolic-image-links]
    - !reference [.release_template, after_script, move-artifacts-to-toplevel]
  artifacts: !reference [.release_template, artifacts, release-artifacts]

release-build-oci:
  rules:
    - !reference [.release_template, rules]
  stage: build
  parallel:
    matrix:
      - <<: *oci_multi_confs
        IMAGES: irma6-test
        MAIN_KAS_FILES: "kas-irma6-base-maintenance.yml:kas-irma6-pa.yml:include/ci/kas-ci-common.yml"
  variables:
    JOB_ARTIFACT: "build/tmp/deploy/images/*/*.rootfs-oci"
    ARTIFACT_SUFFIX: ".rootfs-oci"
  services:
    - !reference [.common_template, services, icecc-daemon]
  script:
    - !reference [.common_template, script, generate-build-targets-other]
    - !reference [.release_template, script, populate-dl-cache]
    - !reference [.release_template, script, populate-dl-dir]
    - !reference [.release_template, script, build]
  after_script:
    - !reference [.develop_template, after_script, move-artifacts-to-toplevel]
  artifacts: !reference [.release_template, artifacts, release-artifacts]

release-build-sdk:
  rules:
    - !reference [.release_template, rules]
  stage: build
  variables:
    BITBAKE_TASK: "-c populate_sdk"
    ARTIFACT_SUFFIX: "-sdk"
  parallel:
    matrix:
      - <<: *target_multi_confs
        IMAGES: "irma6-maintenance"
        MAIN_KAS_FILES: "kas-irma6-base-maintenance.yml:kas-irma6-pa.yml:include/ci/kas-ci-common.yml"
  services:
    - !reference [.common_template, services, icecc-daemon]
  script:
    - !reference [.common_template, script, generate-build-targets-other]
    - !reference [.release_template, script, populate-dl-dir]
    - !reference [.release_template, script, build]
  after_script:
    - !reference [.release_template, after_script, move-artifacts-to-toplevel]
  artifacts: !reference [.release_template, artifacts, release-artifacts]

# Build the deploy image with dev keys
release-build-dev-deploy-distros:
  rules:
    - !reference [.release_template, rules]
  stage: build
  parallel:
    matrix:
      - MULTI_CONF: [imx8mp-irma6r2]
        IMAGES: "irma6-deploy"
  variables:
    MAIN_KAS_FILES: "kas-irma6-base-deploy.yml:kas-irma6-pa.yml:include/ci/kas-ci-common.yml"
    ARTIFACT_SUFFIX: "-dev-deploy"
  services:
    - !reference [.common_template, services, icecc-daemon]
  script:
    - !reference [.common_template, script, generate-build-targets-target]
    - !reference [.release_template, script, populate-dl-cache]
    - !reference [.release_template, script, populate-dl-dir]
    - !reference [.release_template, script, build]
  after_script:
    - !reference [.common_template, after_script, remove-symbolic-image-links]
    - !reference [.release_template, after_script, move-artifacts-to-toplevel]
  artifacts: !reference [.release_template, artifacts, release-artifacts]

# Build the deploy image with production keys
release-build-deploy-distros:
  rules:
    - !reference [.release_template, rules]
  stage: build
  tags:
    # build on release runner
    - iris-kas-release
  parallel:
    matrix:
      - <<: *target_multi_confs
        IMAGES: "irma6-deploy"
  variables:
    MAIN_KAS_FILES: "kas-irma6-base-deploy.yml:kas-irma6-pa.yml:include/ci/kas-ci-common.yml:include/ci/kas-ci-deploy-signing.yml:include/ci/kas-ci-deploy-signing-${MULTI_CONF}.yml"
    ARTIFACT_SUFFIX: "-deploy"
  services:
    - !reference [.common_template, services, icecc-daemon]
  script:
    - !reference [.common_template, script, generate-build-targets-target]
    - !reference [.release_template, script, populate-dl-cache]
    - !reference [.release_template, script, populate-dl-dir]
    - !reference [.release_template, script, build]
  after_script:
    - !reference [.common_template, after_script, remove-symbolic-image-links]
    - !reference [.release_template, after_script, move-artifacts-to-toplevel]
  artifacts: !reference [.release_template, artifacts, release-artifacts]


#############################
### PUSH TEST IMAGE STAGE ###
#############################

push-oci:
  rules:
    - !reference [.release_template, rules]
    # skip if SKIP_OCI_TESTS are set to true and not release
    - if: '$SKIP_OCI_TESTS == "true"'
      when: never
    - !reference [.develop_template, rules]
  stage: push-test-image
  parallel:
    matrix:
      - <<: *oci_multi_confs
  variables:
    ARTIFACT_SUFFIX: ".rootfs-oci"
  tags:
    - gp
  image: quay.io/skopeo/stable:v1.11.2
  before_script:
    # set correct tag on parent-child pipelines
    - |
      if test -n "${UPSTREAM_PROJECT_NAME}"; then
        export OCI_TAG="$(echo ${UPSTREAM_PROJECT_NAME}-${BRANCH_NAME_SLUG} | head -c 63)"
      else
        export OCI_TAG="${CI_COMMIT_REF_SLUG}"
      fi
    - |
      echo "OCI_TAG=${OCI_TAG}" >> build.env
  script:
    - >-
      /usr/bin/skopeo copy
      --dest-creds ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}
      oci:irma6-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}-${MULTI_CONF}${ARTIFACT_SUFFIX}:latest
      docker://${CI_REGISTRY_IMAGE}/test-oci-${MULTI_CONF}:${OCI_TAG}
  artifacts:
    reports:
      dotenv: build.env


##################
### TEST STAGE ###
##################

test-oci:
  stage: test
  rules:
    - !reference [.release_template, rules]
    # skip if SKIP_OCI_TESTS is set to true and not release build
    - if: '$SKIP_OCI_TESTS == "true"'
      when: never
    - !reference [.develop_template, rules]
  tags:
    - gp
  services:
    - name: "${CI_REGISTRY_IMAGE}/test-oci-${MULTI_CONF}:${OCI_TAG}"
      pull_policy: always
      alias: oci-image
      entrypoint: ["/sbin/init"]
  image: alpine:3.17.3
  parallel:
    matrix:
      - <<: *oci_multi_confs
  before_script:
    - apk add --no-cache openssh
  script:
    - echo "Waiting for SSH to become available..."
    - TIMEOUT=0
    - |
      while true; do
        if ssh -o "StrictHostKeyChecking=no" root@127.0.0.1 "cat /dev/null"; then
          break;
        else
          [ $TIMEOUT -le 600 ] || { echo Error: Timeout waiting for SSH server; exit 1; }
          echo "SSH not available yet. Waiting 5 seconds..."
          TIMEOUT=$((TIMEOUT+5));
          sleep 5;
        fi;
      done
    - echo "Starting tests..."
    - ssh -o "StrictHostKeyChecking=no" root@127.0.0.1 "TEMPDIR=/mnt test_von_count --gtest_repeat=3 --gtest_shuffle --gtest_output=xml:/tmp/gtest_results.xml"
  after_script:
    - scp -o "StrictHostKeyChecking=no" root@127.0.0.1:/tmp/gtest_results.xml "${MULTI_CONF}"-gtest_results.xml
  artifacts:
    when: always
    name: "irma6-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}-${MULTI_CONF}-gtest-results"
    paths:
      - ${MULTI_CONF}-gtest_results.xml
    reports:
      junit: ${MULTI_CONF}-gtest_results.xml

systemtest_smoke:
  stage: test
  tags:
    - special-test
  resource_group: systemtest
  variables:
    SYSTEMTEST_PROJECT_DIR: systemtest
    SENSOR1_IP: 172.16.127.3
    SENSOR2_IP: 172.16.126.233
  rules:
    # skip if SKIP_SYSTEMTEST_SMOKE is set to true
    - if: '$SKIP_SYSTEMTEST_SMOKE == "false"'
  before_script:
    - !reference [.common_template, before_script, prepare-systemtest]
  script:
    - cp -r ${CI_PROJECT_DIR}/artifacts/images/${SYSTEMTEST_SW_NAME}/update_files/ ${CI_PROJECT_DIR}/$SYSTEMTEST_PROJECT_DIR/systemtest/resources
    - docker --config ./.gen6tools login ${CI_REGISTRY} -u ${GEN6_TOOLS_DOCKER_REG_USER} -p ${GEN6_TOOLS_DOCKER_REG_TOKEN}
    - echo "executing systemtest smoke tests for ${SYSTEMTEST_SW_NAME}"
    - ./systemtest_smoke.sh
  after_script:
    - docker logout ${CI_REGISTRY}
  artifacts:
    when: always
    paths:
      - ./${SYSTEMTEST_PROJECT_DIR}_products/test_suites/smoke_tests/report.html
      - ./${SYSTEMTEST_PROJECT_DIR}_products/test_suites/smoke_tests/log.html
    reports:
      junit: ${SYSTEMTEST_PROJECT_DIR}_products/test_suites/smoke_tests/output_xunit.xml

##############################
### RELIABILITY TEST STAGE ###
##############################

systemtest_reliability:
  stage: reliability-test
  tags:
    - special-test
  resource_group: systemtest
  variables:
    SYSTEMTEST_PROJECT_DIR: systemtest
    SENSOR1_IP: 172.16.127.3
    SENSOR2_IP: 172.16.126.233
  rules:
    # skip if SKIP_SYSTEMTEST_RELIABILITY or SKIP_SYSTEMTEST_SMOKE is set to true
    - if: '$SKIP_SYSTEMTEST_RELIABILITY == "false" && $SKIP_SYSTEMTEST_SMOKE == "false"'
  before_script:
    - !reference [.common_template, before_script, prepare-systemtest]
  script:
    - echo "executing systemtest reliability tests for ${SYSTEMTEST_SW_NAME}"
    - ./systemtest_reliability.sh ${SYSTEMTEST_RELIABILITY_DURATION}
  after_script:
    - docker logout ${CI_REGISTRY}
  artifacts:
    when: always
    paths:
      - ./${SYSTEMTEST_PROJECT_DIR}_products/test_suites/reliability_tests/report_combined.html
      - ./${SYSTEMTEST_PROJECT_DIR}_products/test_suites/reliability_tests/log_combined.html
    reports:
      junit: ${SYSTEMTEST_PROJECT_DIR}_products/test_suites/reliability_tests/output_xunit_combined.xml


##############################
### UPLOAD ARTIFACTS STAGE ###
##############################

release-upload-artifacts:
  stage: upload-artifacts
  rules:
    - !reference [.release_template, rules]
  tags:
    - gp
  before_script: []
  script:
    - >
      for ARTIFACT in irma6-*; do
        sudo tar 2>&1 -czvf ${ARTIFACT}.tar.gz ${ARTIFACT}
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${ARTIFACT}.tar.gz "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${ARTIFACT}.tar.gz"
      done
    # separate packages only containing customer cleared files
    - >
      for FOLDER in ${IMX8MP_IRMA6R2_DEPLOY} ${SC573_GEN6_DEPLOY}; do
        sudo tar 2>&1 --ignore-failed-read -czvf ${FOLDER}-customer.tar.gz ${FOLDER}/licenses $(find ${FOLDER} -type d -name 'update_files') $(find ${FOLDER} -type f -name '*.swu')
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${FOLDER}-customer.tar.gz "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${FOLDER}-customer.tar.gz"
      done


#####################
### RELEASE STAGE ###
#####################

release-sync-sstate-cache:
  stage: release
  rules:
    - !reference [.release_template, rules]
  script:
    # don't overwrite develop sstate_cache during support release and RC tags
    - >
      if echo "${CI_COMMIT_TAG}" | grep -qviE '\d+\.\d+\.\d+-.*'; then
        rsync -avh --delete ${SSTATE_CACHE_RELEASE} ${SSTATE_CACHE};
      fi
    # wipe release sstate cache
    - find ${SSTATE_CACHE_RELEASE} -mindepth 1 -delete

publish-release:
  stage: release
  tags:
    - gp
  rules:
    - !reference [.release_template, rules]
  variables:
    IMX8MP_IRMA6R2_BASESOURCES_URL: https://${BASE_SOURCES_S3_BUCKET_NAME}.s3.eu-central-1.amazonaws.com/${BASE_SOURCES_S3_PATH_PREFIX}${IMX8MP_IRMA6R2_BASESOURCES}.tar.gz
    SC573_GEN6_BASESOURCES_URL: https://${BASE_SOURCES_S3_BUCKET_NAME}.s3.eu-central-1.amazonaws.com/${BASE_SOURCES_S3_PATH_PREFIX}${SC573_GEN6_BASESOURCES}.tar.gz
  image: registry.gitlab.com/gitlab-org/release-cli:v0.15.0
  before_script: []
  script:
    - echo "Publishing release $CI_COMMIT_TAG"
  release:
    name: "Release $CI_COMMIT_TAG"
    tag_name: "$CI_COMMIT_TAG"
    description: |
      # Assets
      ## IMX8MP-IRMA6R2 (IRMA6 HW Release 2)
      | Asset Name | Description | Clearance |
      | ---------- | ----------- | --------- |
      | ${IMX8MP_IRMA6R2_DEPLOY} | Production Firmware package - all artifacts. | Internal |
      | ${IMX8MP_IRMA6R2_DEPLOY_CUSTOMER} | Production Firmware - update file only. | Customer |
      | ${IMX8MP_IRMA6R2_DEV_DEPLOY} | Firmware package identical to production firmware but with development keys, used for internal testing. | Internal |
      | ${IMX8MP_IRMA6R2_MAINTENANCE_DISTROS} | Firmware package containing images for debugging. | Internal |
      | ${IMX8MP_IRMA6R2_SDK} | Yocto SDK used for cross-compiling. | Internal |
      | ${IMX8MP_IRMA6R2_BASESOURCES} | Environment containing all sources and preconfigured for building the irma6-base image, the open source custom operating system maintained by Iris. | Customer |

      ## SC573-GEN6 (IRMA6 HW Release 1)
      | Asset Name | Description | Clearance |
      | ---------- | ----------- | --------- |
      | ${SC573_GEN6_DEPLOY} | Firmware package containing the image for initial flashing as well as update files for the production firmware (deploy). | Internal |
      | ${SC573_GEN6_DEPLOY_CUSTOMER} | Update package for the production firmware (deploy). | Customer |
      | ${SC573_GEN6_MAINTENANCE_DISTROS} | Firmware package containing images for debugging. | Internal |
      | ${SC573_GEN6_SDK} | Yocto SDK used for cross-compiling. | Internal |
      | ${SC573_GEN6_BASESOURCES} | Environment containing all sources and preconfigured for building the irma6-base image, the open source custom operating system maintained by Iris. | Customer |
    assets:
      links:
        - name: "${IMX8MP_IRMA6R2_DEPLOY}"
          url: "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${IMX8MP_IRMA6R2_DEPLOY}.tar.gz"
        - name: "${IMX8MP_IRMA6R2_DEPLOY_CUSTOMER}"
          url: "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${IMX8MP_IRMA6R2_DEPLOY_CUSTOMER}.tar.gz"
        - name: "${IMX8MP_IRMA6R2_DEV_DEPLOY}"
          url: "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${IMX8MP_IRMA6R2_DEV_DEPLOY}.tar.gz"
        - name: "${IMX8MP_IRMA6R2_MAINTENANCE_DISTROS}"
          url: "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${IMX8MP_IRMA6R2_MAINTENANCE_DISTROS}.tar.gz"
        - name: "${IMX8MP_IRMA6R2_SDK}"
          url: "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${IMX8MP_IRMA6R2_SDK}.tar.gz"
        - name: "${IMX8MP_IRMA6R2_BASESOURCES}"
          url: "${IMX8MP_IRMA6R2_BASESOURCES_URL}"
        - name: "${SC573_GEN6_DEPLOY}"
          url: "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${SC573_GEN6_DEPLOY}.tar.gz"
        - name: "${SC573_GEN6_DEPLOY_CUSTOMER}"
          url: "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${SC573_GEN6_DEPLOY_CUSTOMER}.tar.gz"
        - name: "${SC573_GEN6_MAINTENANCE_DISTROS}"
          url: "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${SC573_GEN6_MAINTENANCE_DISTROS}.tar.gz"
        - name: "${SC573_GEN6_SDK}"
          url: "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${SC573_GEN6_SDK}.tar.gz"
        - name: "${SC573_GEN6_BASESOURCES}"
          url: "${SC573_GEN6_BASESOURCES_URL}"
