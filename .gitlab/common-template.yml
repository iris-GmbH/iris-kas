# SPDX-License-Identifier: MIT
# Copyright (C) 2022 iris-GmbH infrared & intelligent sensors

.common_template:
  rules:
    build_container_rules:
      # build on merge requests with changes to dockerfile targeting default branch
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'
        changes:
          - Dockerfile_iris_kas
      - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
        changes:
          - Dockerfile_iris_kas
      # build on releases
      - if: '$CI_COMMIT_TAG'
      - if: '$FORCE_IRIS_KAS_CONTAINER_BUILD == "true"'

  before_script:
    prepare-systemtest:
      - docker login ${CI_REGISTRY} -u ${SYSTEMTEST_DOCKER_REG_USER} -p ${SYSTEMTEST_DOCKER_REG_TOKEN}
      - echo "checkout systemtest repository"
      - BASE_URL=`echo $CI_REPOSITORY_URL | sed "s;\/*$CI_PROJECT_PATH.*;;"`
      - REPO_URL="$BASE_URL/rd-t/irma-six/systemtest.git"
      - git clone $REPO_URL $SYSTEMTEST_PROJECT_DIR
      - cd $SYSTEMTEST_PROJECT_DIR
      - git checkout $SYSTEMTEST_BASE

  script:
    # creates an archive ${ARTIFACT_NAME}.tar.gz from the folder ${ARTIFACT_FOLDER}
    create-archive-from-folder: # required vars: ARTIFACT_NAME, ARTIFACT_FOLDER
      # ensure all write operations are finished (might lead to deferred deletion otherwise)
      - sync
      - touch ${ARTIFACT_NAME}.tar.gz
      - tar -I "gzip --best" --exclude=${ARTIFACT_NAME}.tar.gz -cf ${ARTIFACT_NAME}.tar.gz ${ARTIFACT_FOLDER}
      - echo "${ARTIFACT_NAME}.tar.gz is $(echo -n $(ls -lh ${ARTIFACT_NAME}.tar.gz | awk '{print $5}')) in size."

    identify_release_from_multiconf:
      - >
        if test "${MULTI_CONF}" = "sc573-gen6" || test "${MULTI_CONF}" = "qemux86-64-r1"; then
          export RELEASE_NAME="IRMA6"
          export RELEASE_VERSION="r1"
        elif test "${MULTI_CONF}" = "imx8mp-irma6r2" || test "${MULTI_CONF}" = "qemux86-64-r2"; then
          export RELEASE_NAME="IRMA6"
          export RELEASE_VERSION="r2"
        else
          echo "Error: Could not identify release from multi_conf ${MULTI_CONF}"
          exit 1
        fi

  after_script:
    create-kas-artifact-folder:
      - >
        if test -z "${KAS_ARTIFACT_SUFFIX}"; then
          echo "Error: Please specify variable KAS_ARTIFACT_SUFFIX for artifact identification."
          exit 1
        fi
      - mkdir ${KAS_ARTIFACT_FOLDER}
      - mv ${KAS_TMPDIR}/deploy ${KAS_ARTIFACT_FOLDER}
      - mv ${KAS_BUILD_DIR}/buildhistory ${KAS_ARTIFACT_FOLDER}
      # create variable for identifying artifact folder
      - echo "$(echo ${MULTI_CONF}${KAS_ARTIFACT_SUFFIX} | tr '-' '_')=${KAS_ARTIFACT_FOLDER}" >> build.env

  artifacts:
    kas-artifacts: # required vars: ARTIFACT_FOLDER
      name: "${CI_JOB_NAME}"
      # currently no support for seperate "on-failure" and "on-success" artifact sections: https://gitlab.com/gitlab-org/gitlab/-/issues/18744
      when: always
      paths:
        - "${KAS_ARTIFACT_FOLDER}"
        - "${KAS_TMPDIR}/work/**/log.do_*"
        - "${KAS_TMPDIR}/work/**/log.task_order"
      expire_in: 7 days
      reports:
        dotenv: build.env

    archive-folder-artifacts: # required vars: ARTIFACT_NAME
      name: "${CI_JOB_NAME}"
      paths:
        - "${ARTIFACT_NAME}.tar.gz"
      expire_in: 7 days
      reports:
        dotenv: build.env
