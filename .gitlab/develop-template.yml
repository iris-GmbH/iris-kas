# SPDX-License-Identifier: MIT
# Copyright (C) 2022 iris-GmbH infrared & intelligent sensors

.develop_template:
  rules:
    # Allow scheduled builds
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    # Allow manually triggering a build from the webinterface  
    - if: '$CI_PIPELINE_SOURCE == "web"'
    # Allow triggering from upstream pipeline
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    # Automatic build on merge request/changes to merge request targeting the default branch
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'
  script:
    build-configuration:
      # depending on pipeline source, the name of the current branch is saved as different variables. Unify into a single variable
      - >
        if [ -n "${BRANCH_NAME}" ]; then
          # if the variable BRANCH_NAME is already defined, this pipeline is called by an upstream project. Try to check out the branch accordingly.
          if [ "${BRANCH_NAME}" != "${CI_DEFAULT_BRANCH}" ] && [ "${BRANCH_NAME}" != "${RELEASE_BRANCH}" ] && $(echo "${GIT_BRANCH}" | grep -vqE '^release/.*'); then
            echo "Trying to checkout ${BRANCH_NAME} in iris-kas";
            git checkout ${BRANCH_NAME} 2>/dev/null \
            && echo "Branch ${BRANCH_NAME} has been checked out in iris-kas" \
            || echo "Branch ${BRANCH_NAME} not found in iris-kas. Sticking with develop branch on iris-kas.";
          fi
        elif [ -n "${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}" ]; then
          export BRANCH_NAME="${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
        elif [ -n "${CI_COMMIT_BRANCH}" ]; then
          export BRANCH_NAME="${CI_COMMIT_BRANCH}"
        fi
      - echo "BRANCH_NAME variable is set to ${BRANCH_NAME}"
      # if the current branch is the default branch, we populate the sstate cache
      - >
        if [ "${BRANCH_NAME}" = "${CI_DEFAULT_BRANCH}" ] || [ "${FORCE_POPULATE_CACHES}" = "true" ]; then
          echo "Populating caches..."
          export POPULATE_CACHES=":include/ci/kas-ci-populate-caches.yml"
        fi
      - kas checkout --update ${MAIN_KAS_FILES}:include/kas-irma6-${MULTI_CONF}.yml:include/ci/kas-ci-develop.yml${POPULATE_CACHES}
      # try to checkout the current branch name (feature/bugfix/...) in all iris meta layers. This makes working with multiple repositories easier for the developers
      - >
        if [ "${BRANCH_NAME}" != "${CI_DEFAULT_BRANCH}" ] && [ "${BRANCH_NAME}" != "${RELEASE_BRANCH}" ] && $(echo "${GIT_BRANCH}" | grep -vqE '^release/.*'); then
          kas for-all-repos --update ${MAIN_KAS_FILES}:include/kas-irma6-${MULTI_CONF}.yml:include/ci/kas-ci-develop.yml${POPULATE_CACHES} """
            if echo \${KAS_REPO_NAME} | grep -qE '.*iris.*'; then
              echo \"Trying to checkout ${BRANCH_NAME} in \${KAS_REPO_NAME}\";
              git checkout ${BRANCH_NAME} 2>/dev/null \
              && echo \"Branch ${BRANCH_NAME} has been checked out in \${KAS_REPO_NAME}\" \
              || echo \"Branch ${BRANCH_NAME} not found in \${KAS_REPO_NAME}\";
            fi
          """
        fi
      - >
        if [ "${BUILD_FROM_SCRATCH}" = "true" ]; then
          echo "This build will be done from scratch...";
          export NO_SETSCENE="--no-setscene"
        fi
    build:
      - echo "Building ${BUILD_TARGET}..."
      # build target images (-k is vital, so that we do not change the branch or config again during run)
      # this also means that the build config cannot change
      # long term it would be smarter to update the refspec within the yaml during change branch
      - kas shell -k -c "bitbake ${NO_SETSCENE} ${BITBAKE_TASK} ${BUILD_TARGET}" ${MAIN_KAS_FILES}
  artifacts:
    develop-deploy-artifacts:
      paths:
        - "${MULTI_CONF}-deploy.tar.gz"
      untracked: false
      expire_in: 7 days
