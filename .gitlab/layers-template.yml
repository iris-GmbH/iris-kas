# SPDX-License-Identifier: MIT
# Copyright (C) 2022 iris-GmbH infrared & intelligent sensors

# This is a shared template to be included by meta-layers

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    # automatically start pipeline for CI branches (-ci / _ci suffix)
    - if: '$CI_COMMIT_BRANCH =~ /^.*(_|-)ci$/'

variables:
  SKIP_OCI_TESTS:
    value: "false"
    description: 'Set to "true" to skip the OCI tests.'
  SKIP_MAINTENANCE_IMAGE_BUILD:
    value: "false"
    description: 'Set to "true" to skip the maintenance image build'
  SKIP_DEPLOY_IMAGE_BUILD:
    value: "true"
    description: 'Set to "false" to build the deploy image'
  FORCE_IRIS_KAS_CONTAINER_BUILD:
    value: "false"
    description: 'Set to "true" to force (re-)build the iris-kas build container on the current branch.'
  SKIP_SYSTEMTEST_SMOKE:
    value: "true"
    description: 'Set to "false" to add execution of systemtest_smoke job. Skipping system smoke test will also skip any additional Systemtests.'
  SKIP_SYSTEMTEST_RELIABILITY:
    value: "true"
    description: 'Set to "false" to add execution of systemtest_reliability job.'
  BUILD_FROM_SCRATCH:
    value: "false"
    description: 'Set to "true" to build from scratch.'
  BUILD_TARGETS:
    value: ""
    description: 'Specify one or more products you want to build as a space separated string. Currently supported products: irma6r2, irma6r1, matrix. If left empty, all available products will be built.'
  KAS_RUNNER_TAG:
    value: "kas"
    description: "The runner tag to use for build jobs. Can be overridden with kas-large for more performance, e.g. when manually building from scratch"

stages:
  - setup
  - build

.trigger-kas-pipeline_template:
  stage: build
  trigger:
    project: public-projects/yocto/iris-kas
    branch: gitlab-pipeline
    strategy: depend
    forward:
      pipeline_variables: true
  trunk-trigger:
    project: public-projects/yocto/iris-kas
    strategy: depend
    forward:
      pipeline_variables: true

# workaround for https://gitlab.com/gitlab-org/gitlab/-/issues/299433
update-non-protected-branch:
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
      when: never
    - when: on_success
  stage: setup
  tags:
    - gp-tiny
  image: bitnami/git:2.38.1
  before_script:
    - git config --global url."https://gitlab-ci-token:${DOWNSTREAM_PIPELINE_TOKEN}@gitlab.devops.defra01.iris-sensing.net/public-projects/yocto/iris-kas.git".insteadOf https://gitlab.devops.defra01.iris-sensing.net/public-projects/yocto/iris-kas.git
  script:
    - git clone https://gitlab.devops.defra01.iris-sensing.net/public-projects/yocto/iris-kas.git
    - cd iris-kas
    - |
      if ! git checkout gitlab-pipeline; then
        git checkout -b gitlab-pipeline
      fi
    - git reset --hard origin/${CI_DEFAULT_BRANCH}
    - git push --force --set-upstream origin gitlab-pipeline

# can be triggered by any developers on non-protected branches
trigger-kas-pipeline:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
      when: never
    - when: on_success
  variables:
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA
    BRANCH_NAME: $CI_COMMIT_BRANCH
    BRANCH_NAME_SLUG: $CI_COMMIT_REF_SLUG
    USE_IDENTICAL_NAMED_BRANCHES: "true"
  stage: !reference [.trigger-kas-pipeline_template, stage]
  trigger: !reference [.trigger-kas-pipeline_template, trigger]

# can only be triggered by maintainers on protected branches, will update yocto sstate cache
trigger-protected-kas-pipeline:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
  variables:
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA
    BRANCH_NAME: $CI_COMMIT_BRANCH
    BRANCH_NAME_SLUG: $CI_COMMIT_REF_SLUG
    USE_IDENTICAL_NAMED_BRANCHES: "false"
  stage: !reference [.trigger-kas-pipeline_template, stage]
  trigger: !reference [.trigger-kas-pipeline_template, trunk-trigger]

merge-trigger-kas-pipeline:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  variables:
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA
    BRANCH_NAME: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    BRANCH_NAME_SLUG: $CI_COMMIT_REF_SLUG
    USE_IDENTICAL_NAMED_BRANCHES: "true"
  stage: !reference [.trigger-kas-pipeline_template, stage]
  trigger: !reference [.trigger-kas-pipeline_template, trigger]
