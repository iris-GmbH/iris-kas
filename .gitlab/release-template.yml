# SPDX-License-Identifier: MIT
# Copyright (C) 2022 iris-GmbH infrared & intelligent sensors

# release(/support) 
.release_template:
  rules:
    # Trigger an automatic build if a new, valid tag is pushed.
    # examples for valid tags:
    # 1.0.1, 1.0.1-RC1, 1.0.1-support-release
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+(-.+)?/'

  script:
    # This script populates the download cache in preparation of a release build.
    # This will ensure that sources are available for following, parallelized build steps.
    populate-dl-cache: # required vars: BUILD_TARGETS, MAIN_KAS_FILES
      - echo "Populating the download mirror..."
      - kas shell -c "bitbake ${BUILD_TARGETS} --runonly=fetch" ${MAIN_KAS_FILES}:include/kas-irma6-${MULTI_CONF}.yml:include/ci/kas-ci-populate-release-caches.yml
    
    populate-dl-dir: # required vars: BUILD_TARGETS, MAIN_KAS_FILES, MULTI_CONF
      # populate the dl dir for offline build. Make use of the download mirror
      - echo "Populating the download folder for offline build..."
      - kas shell -c "bitbake ${BUILD_TARGETS} --runonly=fetch --force" ${MAIN_KAS_FILES}:include/kas-irma6-${MULTI_CONF}.yml:include/ci/kas-ci-download-mirror.yml:include/ci/kas-ci-release-generate-tarballs.yml
      # replace softlinks to download-mirror with hard copies
      - > 
        for f in $(find build/dl_dir -type l); do
          # only check for absolute path links
          if $(readlink "$f" | grep -qP "^/.*$"); then
            cd "$(dirname $f)"
            link="$(readlink "$(basename $f)")"
            # remove target file beforehand, in case this links to directory. Otherwise this will not work
            rm "$(basename $f)"
            echo "copying ${link} to build/dl_dir/$(basename $f)"
            cp -rp "${link}" "$(basename $f)"
            cd - >/dev/null
          fi
        done
      # copy uninative binary shim from mirror into dl dir
      - echo "copying /mnt/yocto-download-mirror/uninative/ to build/dl_dir/uninative"
      - cp -rp /mnt/yocto-download-mirror/uninative/ build/dl_dir/uninative
      # remove temporary files
      - rm -rf build/tmp build/dl_dir/git2/*

    # creates an artifact archive from the current folder
    create-artifact-archive: # required vars: ARTIFACT_NAME
      # ensure all write operations are finished (might lead to deferred deletion otherwise)
      - sync
      - touch ${ARTIFACT_NAME}.tar.gz
      - tar -I "gzip --best" --exclude=${ARTIFACT_NAME}.tar.gz -cf ${ARTIFACT_NAME}.tar.gz .
      - echo "${ARTIFACT_NAME}.tar.gz is $(echo -n $(ls -lh ${ARTIFACT_NAME}.tar.gz | awk '{print $5}')) in size."

    build: # required vars: BUILD_TARGETS, MAIN_KAS_FILES, MULTI_CONF. opt. vars: BITBAKE_TASK
      - echo "Building ${BUILD_TARGETS}..."
      - kas shell -c "bitbake ${BITBAKE_TASK} ${BUILD_TARGETS}" ${MAIN_KAS_FILES}:include/kas-irma6-${MULTI_CONF}.yml:include/ci/kas-ci-release.yml

    offline-build: # required vars: BUILD_TARGETS, MAIN_KAS_FILES, MULTI_CONF. opt. vars: BITBAKE_TASK
      # TODO: make the complete firmware offline reproducible. See DEVOPS-458
      - echo "Attempting to build ${BUILD_TARGETS} offline..."
      - kas shell -c "bitbake ${BITBAKE_TASK} ${BUILD_TARGETS}" ${MAIN_KAS_FILES}:include/kas-irma6-${MULTI_CONF}.yml:include/ci/kas-ci-release.yml:include/kas-offline-build.yml
    # uploads the source files to the appropriate s3 bucket
    s3-upload-sources: # required vars: ARTIFACT_NAME, S3_BUCKET_NAME, S3_STORAGE_CLASS S3_ACL, optional vars: S3_PATH_PREFIX
      - aws s3 cp ${ARTIFACT_NAME}.tar.gz s3://${S3_BUCKET_NAME}/${S3_PATH_PREFIX}${ARTIFACT_NAME}.tar.gz --storage-class ${S3_STORAGE_CLASS} --acl ${S3_ACL}
  artifacts:
    release-source-artifacts:
      name: "irma6-${CI_COMMIT_TAG}-${MULTI_CONF}-base-sources"
      paths:
        - "${MULTI_CONF}-base-sources.tar.gz"
      untracked: false
      expire_in: 20 yrs
    release-artifacts:
      name: "irma6-${CI_COMMIT_TAG}-${MULTI_CONF}"
      paths:
        - "artifacts"
      untracked: false
      expire_in: 20 yrs
    release-sdk-artifacts:
      name: "irma6-${CI_COMMIT_TAG}-${MULTI_CONF}-sdk"
      paths:
        - "artifacts"
    release-qemu-artifacts:
      name: "irma6-${CI_COMMIT_TAG}-${MULTI_CONF}-qemu"
      paths:
        - "${MULTI_CONF}-deploy.tar.gz"
      untracked: false
      expire_in: 20 yrs
