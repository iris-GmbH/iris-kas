From 441a98ac7801e5fbcdc6eb2c23b6941c9dbf318b Mon Sep 17 00:00:00 2001
From: Ian Dannapel <ian.dannapel@iris-sensing.com>
Date: Thu, 14 Aug 2025 13:18:11 +0200
Subject: [PATCH] [AII-470] recipes-support: Add blasfeo 0.1.4.2
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Philipp Sch√∂we <philipp.schoewe@iris-sensing.com>
---
 recipes-support/blasfeo/blasfeo_0.1.4.2.bb | 164 +++++++++++++++++++++
 1 file changed, 164 insertions(+)
 create mode 100644 recipes-support/blasfeo/blasfeo_0.1.4.2.bb

diff --git a/recipes-support/blasfeo/blasfeo_0.1.4.2.bb b/recipes-support/blasfeo/blasfeo_0.1.4.2.bb
new file mode 100644
index 0000000..b613edc
--- /dev/null
+++ b/recipes-support/blasfeo/blasfeo_0.1.4.2.bb
@@ -0,0 +1,164 @@
+SUMMARY = "Basic Linear Algebra Subroutines for Embedded Optimization"
+DESCRIPTION = "BLASFEO is a dense linear algebra library providing high-performance \
+implementations of BLAS- and LAPACK-like routines for use in embedded optimization. \
+A key difference with respect to existing high-performance implementations of BLAS \
+is that the computational performance is optimized for small to medium scale matrices."
+HOMEPAGE = "https://github.com/giaf/blasfeo"
+BUGTRACKER = "https://github.com/giaf/blasfeo/issues"
+SECTION = "libs"
+LICENSE = "BSD-2-Clause"
+LIC_FILES_CHKSUM = "file://LICENSE.txt;md5=32c816687e9a08fdeccc68f14604f6a8"
+
+
+SRC_URI = "git://github.com/giaf/blasfeo.git;protocol=https;branch=master"
+SRCREV = "3f4befd2abf157342a3e0759b6e9f49d56ceb998"
+
+S = "${WORKDIR}/git"
+
+# Dependencies
+DEPENDS = ""
+
+# Build configuration
+EXTRA_OEMAKE = ""
+
+def blasfeo_get_target(d):
+    target_arch = d.getVar('TARGET_ARCH')
+    tune_features = d.getVar('TUNE_FEATURES') or ""
+
+    if target_arch in ['x86_64']:
+        if 'avx2' in tune_features and 'fma' in tune_features:
+            return "X64_INTEL_HASWELL"
+        elif 'avx' in tune_features:
+            return "X64_INTEL_SANDY_BRIDGE"
+        else:
+            return "X64_INTEL_CORE"
+    elif target_arch in ['aarch64']:
+        return "ARMV8A_ARM_CORTEX_A57"
+    elif target_arch in ['arm']:
+        return "ARMV7A_ARM_CORTEX_A15"
+    else:
+        return "GENERIC"
+
+# Configuration variables
+BLASFEO_TARGET ?= "${@blasfeo_get_target(d)}"
+BLASFEO_LA ?= "HIGH_PERFORMANCE"
+BLASFEO_MACRO_LEVEL ?= "0"
+BLASFEO_BLAS_API ?= "1"
+BLASFEO_FORTRAN_BLAS_API ?= "0"
+
+# Install prefix
+PREFIX = "${D}${prefix}"
+
+do_configure() {
+    # Create Makefile.local with our configuration
+    cat > ${S}/Makefile.local << EOF
+# Generated by BitBake recipe
+TARGET=${BLASFEO_TARGET}
+LA=${BLASFEO_LA}
+MACRO_LEVEL=${BLASFEO_MACRO_LEVEL}
+BLAS_API=${BLASFEO_BLAS_API}
+FORTRAN_BLAS_API=${BLASFEO_FORTRAN_BLAS_API}
+PREFIX=${prefix}
+CC=${CC}
+AR=${AR}
+CFLAGS=${CFLAGS}
+EOF
+
+    # Display configuration for debugging
+    bbnote "BLASFEO Configuration:"
+    bbnote "  TARGET=${BLASFEO_TARGET}"
+    bbnote "  LA=${BLASFEO_LA}"
+    bbnote "  MACRO_LEVEL=${BLASFEO_MACRO_LEVEL}"
+    bbnote "  BLAS_API=${BLASFEO_BLAS_API}"
+    bbnote "  FORTRAN_BLAS_API=${BLASFEO_FORTRAN_BLAS_API}"
+}
+
+do_compile() {
+    # Clean any previous builds
+    oe_runmake clean
+
+    # Build static library
+    oe_runmake static_library -j ${@oe.utils.cpu_count()}
+}
+
+do_install() {
+    # Create installation directories
+    install -d ${D}${libdir}
+    install -d ${D}${includedir}/blasfeo
+
+    # Install static library
+    install -m 644 ${S}/lib/libblasfeo.a ${D}${libdir}/
+
+    # Install headers
+    install -m 644 ${S}/include/*.h ${D}${includedir}/blasfeo/
+
+    # Create pkg-config file
+    install -d ${D}${libdir}/pkgconfig
+    cat > ${D}${libdir}/pkgconfig/blasfeo.pc << EOF
+prefix=${prefix}
+exec_prefix=\${prefix}
+libdir=\${exec_prefix}/lib
+includedir=\${prefix}/include
+
+Name: BLASFEO
+Description: Basic Linear Algebra Subroutines for Embedded Optimization
+Version: ${PV}
+Libs: -L\${libdir} -lblasfeo
+Libs.private: -lm
+Cflags: -I\${includedir}/blasfeo
+EOF
+}
+
+# Only static library is built by default
+FILES:${PN}-dev = "${includedir} ${libdir}/pkgconfig ${libdir}/*.a"
+FILES:${PN}-staticdev = "${libdir}/*.a"
+
+# Since we're only building static libraries, we need the -dev package
+ALLOW_EMPTY:${PN} = "1"
+
+# Runtime dependencies
+RDEPENDS:${PN}-dev = ""
+
+# Build dependencies
+DEPENDS:append = " virtual/libc"
+
+# Package architecture specific
+PACKAGE_ARCH = "${MACHINE_ARCH}"
+
+# Configuration options that can be overridden
+PACKAGECONFIG ??= ""
+PACKAGECONFIG[reference] = "LA=REFERENCE,,"
+PACKAGECONFIG[blas-wrapper] = "LA=BLAS_WRAPPER,,"
+PACKAGECONFIG[macro-level-1] = "MACRO_LEVEL=1,,"
+PACKAGECONFIG[macro-level-2] = "MACRO_LEVEL=2,,"
+PACKAGECONFIG[no-blas-api] = "BLAS_API=0,,"
+PACKAGECONFIG[fortran-blas-api] = "FORTRAN_BLAS_API=1,,"
+
+# Handle PACKAGECONFIG
+do_configure:append() {
+    if [ "${@bb.utils.contains('PACKAGECONFIG', 'reference', '1', '0', d)}" = "1" ]; then
+        sed -i 's/^LA=.*/LA=REFERENCE/' ${S}/Makefile.local
+    fi
+
+    if [ "${@bb.utils.contains('PACKAGECONFIG', 'blas-wrapper', '1', '0', d)}" = "1" ]; then
+        sed -i 's/^LA=.*/LA=BLAS_WRAPPER/' ${S}/Makefile.local
+    fi
+
+    if [ "${@bb.utils.contains('PACKAGECONFIG', 'macro-level-1', '1', '0', d)}" = "1" ]; then
+        sed -i 's/^MACRO_LEVEL=.*/MACRO_LEVEL=1/' ${S}/Makefile.local
+    fi
+
+    if [ "${@bb.utils.contains('PACKAGECONFIG', 'macro-level-2', '1', '0', d)}" = "1" ]; then
+        sed -i 's/^MACRO_LEVEL=.*/MACRO_LEVEL=2/' ${S}/Makefile.local
+    fi
+
+    if [ "${@bb.utils.contains('PACKAGECONFIG', 'no-blas-api', '1', '0', d)}" = "1" ]; then
+        sed -i 's/^BLAS_API=.*/BLAS_API=0/' ${S}/Makefile.local
+    fi
+
+    if [ "${@bb.utils.contains('PACKAGECONFIG', 'fortran-blas-api', '1', '0', d)}" = "1" ]; then
+        sed -i 's/^FORTRAN_BLAS_API=.*/FORTRAN_BLAS_API=1/' ${S}/Makefile.local
+    fi
+}
+
+BBCLASSEXTEND = "native nativesdk"
\ No newline at end of file
-- 
2.50.1

