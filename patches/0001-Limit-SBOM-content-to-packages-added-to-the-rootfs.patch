From 187b165c124d5fdc7badf7abaa9099ad1c7d4df8 Mon Sep 17 00:00:00 2001
From: Marcel Plumbohm <marcel.plumbohm@iris-sensing.com>
Date: Thu, 6 Mar 2025 12:22:06 +0100
Subject: [PATCH] Limit SBOM content to packages added to the rootfs

We use open embedded list_installed_packages function to filter for
runtime packages added to the rootfs. Additionally we now use sstate
caching mechanism to speed up cyclonedx sbom generation on rebuilds.

Fixes https://github.com/savoirfairelinux/meta-cyclonedx/issues/9

Co-authored-by: Jasper Orschulko <jasper@fancydomain.eu>
Signed-off-by: Marcel Plumbohm <marcel.plumbohm@iris-sensing.com>

Backported to scarthgap

Signed-off-by: Jasper Orschulko <jasper@fancydomain.eu>

Upstream-Status: Submitted [https://github.com/savoirfairelinux/meta-cyclonedx/pull/13]

---
 README.md                        |  33 ++++-
 classes/cyclonedx-export.bbclass | 233 ++++++++++++++++++++++---------
 2 files changed, 193 insertions(+), 73 deletions(-)

diff --git a/README.md b/README.md
index 2ef8d19..dc3e14d 100644
--- a/README.md
+++ b/README.md
@@ -3,10 +3,13 @@
 `meta-cyclonedx` is a [Yocto](https://www.yoctoproject.org/) meta-layer which produces [CycloneDX](https://cyclonedx.org/) Software Bill of Materials (aka [SBOM](https://www.ntia.gov/SBOM)) from your root filesystem.
 
 This repository is forked from [BG Networks repository](https://github.com/bgnetworks/meta-dependencytrack) but differs by the following:
-- Removed direct integration with DependencyTrack.
-- Exported CycloneDX include packages, but also vulnerabilities found by Yocto.
-- Generation of CPE is fixed and also generate purl for packages.
-- Added generation of an additional CycloneDX VEX file which contains information on patched and ignored CVEs from within the Yocto Build System.
+
+- Direct integration with DependencyTrack has been removed in favour of generic CycloneDX support.
+- Support for multiple supported Yocto (LTS) releases.
+- Improved package matching against the [NIST NVD](https://nvd.nist.gov/) by fixing [CPE](https://nvd.nist.gov/products/cpe) generation process.
+- Included [purl](https://github.com/package-url/purl-spec) package urls.
+- Added generation of an additional CycloneDX VEX file which contains information on patched and ignored CVEs from within the OpenEmbedded build system.
+- Added option to reduce the SBOM size by limiting to runtime packages ([which might potentially come at some expense](#potentially-missing-packages-after-runtime-filtering))
 
 ## Installation
 
@@ -31,11 +34,11 @@ To enable and configure the layer simply inherit the `cyclonedx-export` class in
 INHERIT += "cyclonedx-export"
 ```
 
-## Building
+By default, meta-cyclonedx will only include runtime packages in its sbom and vex export files which drastically reduces the number of packages. However, this can lead to valid packages being omitted from the bom ([see](#potentially-missing-packages-after-runtime-filtering)). If desired, you can enable to include all packages at build-time by setting `CYCLONEDX_RUNTIME_PACKAGES_ONLY = "1"` in your `local.conf`.
 
-Once everything is configured simply build your image as you normally would.
+## Usage
 
-Alternatively, if you are only interested in the CycloneDX files, you may append your bitbake command with `--runonly=do_cyclonedx_package_collect` which will limit bitbake to run only the required tasks for creating the CycloneDX output.
+Once everything is configured simply build your image as you normally would.
 
 By default the final CycloneDX SBOMs are saved in the folder `${DEPLOY_DIR}/cyclonedx-export` as `bom.json` and `vex.json` respectively.
 
@@ -69,3 +72,19 @@ At the time of writing this can be done by leveraging the following API endpoint
 Please refer to [DependencyTracks REST API documentation](https://docs.dependencytrack.org/integrations/rest-api/) for the usage of these endpoints as well as the required token permissions.
 
 In the future we might include an example script in this repository.
+
+## Known Limitations
+
+### Potentially Missing Packages after Runtime-Filtering
+
+We use the `image_list_installed_packages` function from upstream OpenEmbedded as a means to reduce the SBOM to packages that are added to the final rootfs. This drastically reduces the "noise" generated by CVEs in build-time dependencies. This however comes with some potential downsides (i.e. missing some packages), as discussed [here](https://github.com/savoirfairelinux/meta-cyclonedx/issues/9#issue-2494183505).
+
+### Missing Dependencies with Modern Programming Languages
+
+OpenEmbedded and its core mechanisms work best with "traditional" programming languages such as C and C++, as these are the languages that it were additionally designed around. For instance, a core-assumption prevalent in many OE mechanisms (including those we depend on in meta-cyclonedx) is that each library is described in its own OE recipe. This however does not work well with many modern programming languages that come with their own package manager (e.g. NPM, Cargo, Go Modules, ...) that do not necessarily integrate well into OpenEmbedded and pull hundreds of external dependencies (good luck writing a separate OE recipe for each dependency in a small-medium sized Node.js project).
+
+Thus, if you rely on packages written in programming languages that come with their own package managers you might be better of by using a divide and conquer approach for creating complete CycloneDX SBOMs (your mileage may vary):
+
+1. Use this meta-layer to generate a CycloneDX SBOM for your OE-based operating system.
+2. Use tools for generating a CycloneDX SBOM for that particular programming language (e.g. [Rust](https://github.com/CycloneDX/cyclonedx-rust-cargo), [NPM](https://github.com/CycloneDX/cyclonedx-node-npm), [Golang](https://github.com/CycloneDX/cyclonedx-gomod), ...)
+3. Optionally, use some glue code to merge the SBOMs together ([cyclonedx-cli](https://github.com/CycloneDX/cyclonedx-cli) offers merge functionality)
diff --git a/classes/cyclonedx-export.bbclass b/classes/cyclonedx-export.bbclass
index 8ee2ea9..fcc0334 100644
--- a/classes/cyclonedx-export.bbclass
+++ b/classes/cyclonedx-export.bbclass
@@ -7,17 +7,25 @@
 CVE_PRODUCT ??= "${BPN}"
 CVE_VERSION ??= "${PV}"
 
+CYCLONEDX_RUNTIME_PACKAGES_ONLY ??= "1"
+
 CYCLONEDX_EXPORT_DIR ??= "${DEPLOY_DIR}/cyclonedx-export"
 CYCLONEDX_EXPORT_SBOM ??= "${CYCLONEDX_EXPORT_DIR}/bom.json"
 CYCLONEDX_EXPORT_VEX ??= "${CYCLONEDX_EXPORT_DIR}/vex.json"
-CYCLONEDX_EXPORT_TMP ??= "${TMPDIR}/cyclonedx-export"
-CYCLONEDX_EXPORT_LOCK ??= "${CYCLONEDX_EXPORT_TMP}/bom.lock"
+CYCLONEDX_TMP_WORK_DIR ??= "${WORKDIR}/cyclonedx"
+CYCLONEDX_TMP_PN_LIST = "${CYCLONEDX_TMP_WORK_DIR}/pn-list.json"
+CYCLONEDX_WORK_DIR_ROOT ??= "${TMPDIR}/cyclonedx"
+CYCLONEDX_WORK_DIR = "${CYCLONEDX_WORK_DIR_ROOT}/${PN}"
+CYCLONEDX_WORK_DIR_PN_LIST = "${CYCLONEDX_WORK_DIR}/pn-list.json"
+
+# We need to add the sbom serial number to the list of vulnerabilites for each recipe but
+# don't know it until after we generate the sbom export header file
+CYCLONEDX_SBOM_SERIAL_PLACEHOLDER = "<SBOM_SERIAL>"
 
 # resolve CVE_CHECK_IGNORE and CVE_STATUS_GROUPS,
 # taken from https://git.yoctoproject.org/poky/commit/meta/classes/cve-check.bbclass?id=be9883a92bad0fe4c1e9c7302c93dea4ac680f8c
 # SPDX-License-Identifier: MIT
-# Copyright (C) 2023 Andrej Valek <andrej.valek@siemens.com>
-
+# Copyright OpenEmbedded Contributors
 python () {
     # Fallback all CVEs from CVE_CHECK_IGNORE to CVE_STATUS
     cve_check_ignore = d.getVar("CVE_CHECK_IGNORE")
@@ -36,82 +44,71 @@ python () {
             bb.warn("CVE_STATUS_GROUPS contains undefined variable %s" % cve_status_group)
 }
 
-python do_cyclonedx_init() {
-    import uuid
-    from datetime import datetime, timezone
-
-    timestamp = datetime.now(timezone.utc).isoformat()
-    sbom_dir = d.getVar("CYCLONEDX_EXPORT_DIR")
-    bb.debug(2, "Creating cyclonedx directory: %s" % sbom_dir)
-    bb.utils.mkdirhier(sbom_dir)
-
-    # Generate unique serial numbers for sbom and vex document
-    sbom_serial_number = str(uuid.uuid4())
-    vex_serial_number = str(uuid.uuid4())
-
-    bb.debug(2, f"Creating empty sbom file with serial number {sbom_serial_number}")
-    write_json(d.getVar("CYCLONEDX_EXPORT_SBOM"), {
-        "bomFormat": "CycloneDX",
-        "specVersion": "1.4",
-        "serialNumber": f"urn:uuid:{sbom_serial_number}",
-        "version": 1,
-        "metadata": {
-            "timestamp": timestamp,
-            "tools": [{"name": "yocto"}]
-        },
-        "components": []
-    })
-
-    bb.debug(2, f"Creating empty vex file with serial number {vex_serial_number}")
-    write_json(d.getVar("CYCLONEDX_EXPORT_VEX"), {
-        "bomFormat": "CycloneDX",
-        "specVersion": "1.4",
-        "serialNumber": f"urn:uuid:{vex_serial_number}",
-        "version": 1,
-        "metadata": {
-            "timestamp": timestamp,
-            "tools": [{"name": "yocto"}]
-        },
-        "vulnerabilities": []
-    })
+# Clean out work folder to avoid leftovers from previous builds when including build-time package
+# information and a recipe was removed from the dependency list. (CYCLONEDX_RUNTIME_PACKAGES_ONLY set to 0)
+python clean_cyclonedx_work_folder() {
+    bb.note(f"Cleaning cyclonedx work folder {d.getVar('CYCLONEDX_WORK_DIR_ROOT')}")
 }
-addhandler do_cyclonedx_init
-do_cyclonedx_init[eventmask] = "bb.event.BuildStarted"
+clean_cyclonedx_work_folder[cleandirs] = "${CYCLONEDX_WORK_DIR_ROOT}"
+addhandler clean_cyclonedx_work_folder
+clean_cyclonedx_work_folder[eventmask] = "bb.event.BuildStarted"
 
 python do_cyclonedx_package_collect() {
+    """
+    Collect package information and CVE data from all packages built for the target architecture.
+    """
     from oe.cve_check import decode_cve_status
 
+    pn = d.getVar("PN")
+
     # ignore non-target packages
     for ignored_suffix in (d.getVar("SPECIAL_PKGSUFFIX") or "").split():
-        if d.getVar("PN").endswith(ignored_suffix):
+        if pn.endswith(ignored_suffix):
             return
 
-    # load the bom
+    # get all CVE product names and version from the recipe
     name = d.getVar("CVE_PRODUCT")
     version = d.getVar("CVE_VERSION")
-    sbom = read_json(d.getVar("CYCLONEDX_EXPORT_SBOM"))
-    # extract the sbom serial number without "urn:uuid:" prefix
-    # (avoid using builtin str.removeprefix function as Python >= 3.9 required)
-    sbom_serial_number = sbom["serialNumber"][len("urn:uuid:"):]
-    vex = read_json(d.getVar("CYCLONEDX_EXPORT_VEX"))
 
+    # We create and populate a per-recipe partial sbom which will be added to the sstate cache
+    pn_list = {}
+    pn_list["pkgs"] = []
+    cves = []
+    # append all defined package names for recipe to pn_list pkgs
     for pkg in generate_packages_list(name, version):
-        if not next((c for c in sbom["components"] if c["cpe"] == pkg["cpe"]), None):
-            sbom["components"].append(pkg)
+        if not next((c for c in pn_list["pkgs"] if c["cpe"] == pkg["cpe"]), None):
+            pn_list["pkgs"].append(pkg)
             bom_ref = pkg["bom-ref"]
 
+            # append any cve status within recipe to pn_list cves
             for cve in (d.getVarFlags("CVE_STATUS") or {}):
-                append_to_vex_vulnerabilities(d, vex, cve, sbom_serial_number, bom_ref)
-    
-    # write it back to the deploy directory
-    write_json(d.getVar("CYCLONEDX_EXPORT_SBOM"), sbom)
-    write_json(d.getVar("CYCLONEDX_EXPORT_VEX"), vex)
+                append_to_vex(d, cve, cves, bom_ref)
+
+    pn_list["cves"] = cves
+
+    # write partial sbom to the recipes work folder
+    write_json(d.getVar("CYCLONEDX_TMP_PN_LIST"), pn_list)
 }
 
 addtask do_cyclonedx_package_collect before do_build
-do_cyclonedx_package_collect[nostamp] = "1"
-do_cyclonedx_package_collect[lockfiles] += "${CYCLONEDX_EXPORT_LOCK}"
-do_rootfs[recrdeptask] += "do_cyclonedx_package_collect"
+do_cyclonedx_package_collect[cleandirs] = "${CYCLONEDX_TMP_WORK_DIR}"
+
+# Utilizing shared state for output caching
+# see https://docs.yoctoproject.org/overview-manual/concepts.html#shared-state
+SSTATETASKS += "do_populate_cyclonedx"
+do_populate_cyclonedx() {
+    bbnote "Deploying intermediate product name list files from ${CYCLONEDX_TMP_WORK_DIR} to ${CYCLONEDX_WORK_DIR}"
+}
+python do_populate_cyclonedx_setscene() {
+    sstate_setscene(d)
+}
+
+do_populate_cyclonedx[cleandirs] = "${CYCLONEDX_WORK_DIR}"
+do_populate_cyclonedx[sstate-inputdirs] = "${CYCLONEDX_TMP_WORK_DIR}"
+do_populate_cyclonedx[sstate-outputdirs] = "${CYCLONEDX_WORK_DIR}"
+addtask do_populate_cyclonedx_setscene
+addtask do_populate_cyclonedx after do_cyclonedx_package_collect
+do_rootfs[recrdeptask] += "do_populate_cyclonedx"
 
 def read_json(path):
     import json
@@ -137,7 +134,8 @@ def generate_packages_list(products_names, version):
     version = version.split("+git")[0]
 
     # some packages have alternative names, so we split CVE_PRODUCT
-    for product in products_names.split():
+    # convert to set to avoid duplicates
+    for product in set(products_names.split()):
         # CVE_PRODUCT in recipes may include vendor information for CPE identifiers. If not,
         # use wildcard for vendor.
         if ":" in product:
@@ -158,7 +156,11 @@ def generate_packages_list(products_names, version):
         packages.append(pkg)
     return packages
 
-def append_to_vex_vulnerabilities(d, vex, cve, sbom_serial_number, bom_ref):
+def append_to_vex(d, cve, cves, bom_ref):
+    """
+    Collect CVE status information from within open embedded recipes and append to add to cve dictionary.
+    This could be backported CVE fixes or ignored CVEs.
+    """
     from oe.cve_check import decode_cve_status
 
     decoded_status, state, justification = decode_cve_status(d, cve)
@@ -179,14 +181,113 @@ def append_to_vex_vulnerabilities(d, vex, cve, sbom_serial_number, bom_ref):
         detail_string += f"STATE: {state}\n"
     if justification:
         detail_string += f"JUSTIFICATION: {justification}\n"
-    vex["vulnerabilities"].append({
+
+    cves.append({
         "id": cve,
         # vex documents require a valid source, see https://github.com/DependencyTrack/dependency-track/issues/2977
         # this should always be NVD for yocto CVEs.
         "source": {"name": "NVD", "url": f"https://nvd.nist.gov/vuln/detail/{cve}"},
         "analysis": {
             "state": vex_state,
-            "detail": detail_string
+            "detail": detail_string,
         },
-        "affects": [{"ref": f"urn:cdx:{sbom_serial_number}/1#{bom_ref}"}]
+        "affects": [{"ref": f"urn:cdx:{d.getVar('CYCLONEDX_SBOM_SERIAL_PLACEHOLDER')}/1#{bom_ref}"}]
     })
+    return
+
+python do_deploy_cyclonedx() {
+    """
+    Select CVE and package information and runtime packages and output them into a single export file.
+    """
+    from oe.rootfs import image_list_installed_packages
+    import uuid
+    from datetime import datetime, timezone
+    import os
+
+    timestamp = datetime.now(timezone.utc).isoformat()
+
+    # Generate unique serial numbers for sbom and vex document
+    sbom_serial_number = str(uuid.uuid4())
+    vex_serial_number = str(uuid.uuid4())
+
+    cyclonedx_work_dir_root = d.getVar("CYCLONEDX_WORK_DIR_ROOT")
+
+    # Generate sbom document header
+    bb.debug(2, f"Creating empty temporary sbom file with serial number {sbom_serial_number}")
+    sbom = {
+        "bomFormat": "CycloneDX",
+        "specVersion": "1.4",
+        "serialNumber": f"urn:uuid:{sbom_serial_number}",
+        "version": 1,
+        "metadata": {
+            "timestamp": timestamp,
+            "tools": [{"name": "yocto"}]
+        },
+        "components": []
+    }
+
+    # Generate vex document header
+    bb.debug(2, f"Creating empty temporary vex file with serial number {sbom_serial_number}")
+    vex = {
+        "bomFormat": "CycloneDX",
+        "specVersion": "1.4",
+        "serialNumber": f"urn:uuid:{vex_serial_number}",
+        "version": 1,
+        "metadata": {
+            "timestamp": timestamp,
+            "tools": [{"name": "yocto"}]
+        },
+        "vulnerabilities": []
+    }
+
+    # taken from https://github.com/yoctoproject/poky/blob/fec201518be3c35a9359ec8c37675a33e458b92d/meta/classes/cve-check.bbclass
+    # SPDX-License-Identifier: MIT
+    # Copyright OpenEmbedded Contributors
+    # Collect sbom data from runtime packages
+
+    recipes = set()
+    if d.getVar('CYCLONEDX_RUNTIME_PACKAGES_ONLY') == "1":
+        for pkg in list(image_list_installed_packages(d)):
+            pkg_info = os.path.join(d.getVar('PKGDATA_DIR'),
+                                    'runtime-reverse', pkg)
+            pkg_data = oe.packagedata.read_pkgdatafile(pkg_info)
+            recipes.add(pkg_data["PN"])
+    else:
+        recipes = {pn for pn in os.listdir(cyclonedx_work_dir_root) if os.path.isdir(os.path.join(cyclonedx_work_dir_root, pn))}
+
+    save_pn = d.getVar("PN")
+    for pkg in recipes:
+        # To be able to use the CYCLONEDX_WORK_DIR_PN_LIST variable we have to evaluate
+        # it with the different PN names set each time.
+        d.setVar("PN", pkg)
+
+        pn_list_filepath = d.getVar("CYCLONEDX_WORK_DIR_PN_LIST")
+
+        if not os.path.exists(pn_list_filepath):
+            continue
+
+        pn_list = read_json(pn_list_filepath)
+
+        for pn_pkg in pn_list["pkgs"]:
+            # Avoid multiple pkgs referencing the same cpe
+            for sbom_pkg in sbom["components"]:
+                if pn_pkg["cpe"] == sbom_pkg["cpe"]:
+                    break
+            else:
+                sbom["components"].append(pn_pkg)
+        for pn_cve in pn_list["cves"]:
+            pn_cve["affects"][0]["ref"] = pn_cve["affects"][0]["ref"].replace(
+                d.getVar('CYCLONEDX_SBOM_SERIAL_PLACEHOLDER'), sbom_serial_number)
+            vex["vulnerabilities"].append(pn_cve)
+
+    d.setVar("PN", save_pn)
+
+    write_json(d.getVar("CYCLONEDX_EXPORT_SBOM"), sbom)
+    write_json(d.getVar("CYCLONEDX_EXPORT_VEX"), vex)
+}
+do_deploy_cyclonedx[cleandirs] = "${CYCLONEDX_EXPORT_DIR}"
+
+# We use ROOTFS_POSTUNINSTALL_COMMAND to make sure this function runs exactly once
+# after the build process has been completed
+# see https://docs.yoctoproject.org/ref-manual/variables.html#term-ROOTFS_POSTUNINSTALL_COMMAND
+ROOTFS_POSTUNINSTALL_COMMAND =+ "do_deploy_cyclonedx; "
-- 
2.47.2

