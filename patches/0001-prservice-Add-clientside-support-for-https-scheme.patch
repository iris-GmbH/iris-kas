From 19bef54596bf76ae60c450f963f5d6331f75536d Mon Sep 17 00:00:00 2001
From: Jasper Orschulko <Jasper.Orschulko@iris-sensing.com>
Date: Wed, 8 Dec 2021 18:05:33 +0100
Subject: [PATCH] prservice: Add clientside support for https scheme

Add support for setting the protocol scheme within the PRSERV_HOST variable.
This enables the usage of https, e.g. when prservice sits behind a reverse
proxy. When no scheme is defined, bitbake will fallback to the http scheme.

Signed-off-by: Jasper Orschulko <Jasper.Orschulko@iris-sensing.com>
---
 .../bitbake-user-manual-ref-variables.rst     |  6 ++
 bitbake/lib/bb/server/xmlrpcclient.py         | 67 ++++++++++++++++---
 bitbake/lib/bb/server/xmlrpcserver.py         |  4 +-
 bitbake/lib/bb/ui/uievent.py                  |  2 +-
 bitbake/lib/prserv/serv.py                    | 27 +++++---
 .../lib/toaster/bldcontrol/bbcontroller.py    |  3 +-
 meta/lib/oe/prservice.py                      |  4 +-
 7 files changed, 85 insertions(+), 28 deletions(-)

diff --git a/bitbake/doc/bitbake-user-manual/bitbake-user-manual-ref-variables.rst b/bitbake/doc/bitbake-user-manual/bitbake-user-manual-ref-variables.rst
index 74a3eb8095..80c9fc6874 100644
--- a/bitbake/doc/bitbake-user-manual/bitbake-user-manual-ref-variables.rst
+++ b/bitbake/doc/bitbake-user-manual/bitbake-user-manual-ref-variables.rst
@@ -1162,6 +1162,12 @@ overview of their function and contents.
       service. You can set ``PRSERV_HOST`` to other values to use a remote PR
       service.
 
+      The PRSERV_HOST variable may also contain the scheme (http/https), e.g.: ::
+
+        PRSERV_HOST = "https://remote-host.ltd:443"
+
+      If no scheme is specified, bitbake will fall back to http.
+
    :term:`PV`
       The version of the recipe.
 
diff --git a/bitbake/lib/bb/server/xmlrpcclient.py b/bitbake/lib/bb/server/xmlrpcclient.py
index 442ea7b264..1aa546e0ed 100644
--- a/bitbake/lib/bb/server/xmlrpcclient.py
+++ b/bitbake/lib/bb/server/xmlrpcclient.py
@@ -41,20 +41,59 @@ class BBTransport(xmlrpc.client.Transport):
             h.putheader("Bitbake-token", self.connection_token)
         xmlrpc.client.Transport.send_content(self, h, body)
 
-def _create_server(host, port, timeout = 60):
-    t = BBTransport(timeout)
-    s = xmlrpc.client.ServerProxy("http://%s:%d/" % (host, port), transport=t, allow_none=True, use_builtin_types=True)
+class BBSafeTransport(xmlrpc.client.SafeTransport):
+    def __init__(self, timeout):
+        self.timeout = timeout
+        self.connection_token = None
+        xmlrpc.client.SafeTransport.__init__(self)
+
+    # Modified from default to pass timeout to HTTPSConnection
+    def make_connection(self, host):
+        #return an existing connection if possible.  This allows
+        #HTTP/1.1 keep-alive.
+        if self._connection and host == self._connection[0]:
+            return self._connection[1]
+
+        # create a HTTP connection object from a host descriptor
+        chost, self._extra_headers, x509 = self.get_host_info(host)
+        #store the host argument along with the connection object
+        self._connection = host, http.client.HTTPSConnection(chost, timeout=self.timeout, context=None, **(x509 or {}))
+        return self._connection[1]
+
+    def set_connection_token(self, token):
+        self.connection_token = token
+
+    def send_content(self, h, body):
+        if self.connection_token:
+            h.putheader("Bitbake-token", self.connection_token)
+        xmlrpc.client.Transport.send_content(self, h, body)
+
+def _create_server(scheme, host, port, timeout = 60):
+    if scheme == "http":
+        t = BBTransport(timeout)
+    elif scheme == "https":
+        t = BBSafeTransport(timeout)
+    else:
+        error = "Unsupported scheme %s detected. Please use \"http\" or \"https\"." % scheme
+        raise BaseException(error)
+    s = xmlrpc.client.ServerProxy("%s://%s:%d/" % (scheme, host, port), transport=t, allow_none=True, use_builtin_types=True)
     return s, t
 
 def check_connection(remote, timeout):
     try:
-        host, port = remote.split(":")
+        shost, port = remote.rsplit(":", 1)
         port = int(port)
+        _ = shost.split("://")
+        if len(_) == 1:
+            scheme = "http"
+            host = _[0]
+        else:
+            scheme, host = _
     except Exception as e:
         bb.warn("Failed to read remote definition (%s)" % str(e))
         raise e
 
-    server, _transport = _create_server(host, port, timeout)
+    server, _transport = _create_server(scheme, host, port, timeout)
     try:
         ret, err =  server.runCommand(['getVariable', 'TOPDIR'])
         if err or not ret:
@@ -64,8 +103,8 @@ def check_connection(remote, timeout):
     return True
 
 class BitBakeXMLRPCServerConnection(object):
-    def __init__(self, host, port, clientinfo=("localhost", 0), observer_only = False, featureset = None):
-        self.connection, self.transport = _create_server(host, port)
+    def __init__(self, scheme, host, port, clientinfo=("localhost", 0), observer_only = False, featureset = None):
+        self.connection, self.transport = _create_server(scheme, host, port)
         self.clientinfo = clientinfo
         self.observer_only = observer_only
         if featureset:
@@ -112,10 +151,16 @@ class BitBakeXMLRPCServerConnection(object):
             pass
 
 def connectXMLRPC(remote, featureset, observer_only = False, token = None):
-    # The format of "remote" must be "server:port"
+    # The format of "remote" must be "[scheme://]server:port"
     try:
-        [host, port] = remote.split(":")
+        [shost, port] = remote.rsplit(":", 1)
         port = int(port)
+        _ = shost.split("://")
+        if len(_) == 1:
+            scheme = "http"
+            host = _[0]
+        else:
+            scheme, host = _
     except Exception as e:
         bb.warn("Failed to parse remote definition %s (%s)" % (remote, str(e)))
         raise e
@@ -131,10 +176,10 @@ def connectXMLRPC(remote, featureset, observer_only = False, token = None):
         bb.warn("Could not create socket for %s:%s (%s)" % (host, port, str(e)))
         raise e
     try:
-        connection = BitBakeXMLRPCServerConnection(host, port, (ip, 0), observer_only, featureset)
+        connection = BitBakeXMLRPCServerConnection(scheme, host, port, (ip, 0), observer_only, featureset)
         return connection.connect(token)
     except Exception as e:
-        bb.warn("Could not connect to server at %s:%s (%s)" % (host, port, str(e)))
+        bb.warn("Could not connect to server at %s://%s:%s (%s)" % (scheme, host, port, str(e)))
         raise e
 
 
diff --git a/bitbake/lib/bb/server/xmlrpcserver.py b/bitbake/lib/bb/server/xmlrpcserver.py
index 2fa71be667..7e13493e15 100644
--- a/bitbake/lib/bb/server/xmlrpcserver.py
+++ b/bitbake/lib/bb/server/xmlrpcserver.py
@@ -92,11 +92,11 @@ class BitBakeXMLRPCServerCommands():
         self.server = server
         self.has_client = False
 
-    def registerEventHandler(self, host, port):
+    def registerEventHandler(self, scheme, host, port):
         """
         Register a remote UI Event Handler
         """
-        s, t = bb.server.xmlrpcclient._create_server(host, port)
+        s, t = bb.server.xmlrpcclient._create_server(scheme, host, port)
 
         # we don't allow connections if the cooker is running
         if (self.server.cooker.state in [bb.cooker.state.parsing, bb.cooker.state.running]):
diff --git a/bitbake/lib/bb/ui/uievent.py b/bitbake/lib/bb/ui/uievent.py
index 13d0d4a04c..4b0f0f4255 100644
--- a/bitbake/lib/bb/ui/uievent.py
+++ b/bitbake/lib/bb/ui/uievent.py
@@ -38,7 +38,7 @@ class BBUIEventQueue:
         # giving up
 
         for count_tries in range(5):
-            ret = self.BBServer.registerEventHandler(self.host, self.port)
+            ret = self.BBServer.registerEventHandler("http", self.host, self.port)
 
             if isinstance(ret, collections.Iterable):
                 self.EventHandle, error = ret
diff --git a/bitbake/lib/prserv/serv.py b/bitbake/lib/prserv/serv.py
index 25dcf8a0ee..c2d2c358ba 100644
--- a/bitbake/lib/prserv/serv.py
+++ b/bitbake/lib/prserv/serv.py
@@ -169,7 +169,7 @@ class PRServer(SimpleXMLRPCServer):
 
     def work_forever(self,):
         self.quitflag = False
-        # This timeout applies to the poll in TCPServer, we need the select 
+        # This timeout applies to the poll in TCPServer, we need the select
         # below to wake on our quit pipe closing. We only ever call into handle_request
         # if there is data there.
         self.timeout = 0.01
@@ -219,14 +219,14 @@ class PRServer(SimpleXMLRPCServer):
             pid = os.fork()
             if pid > 0:
                 os.waitpid(pid, 0)
-                #parent return instead of exit to give control 
+                #parent return instead of exit to give control
                 return pid
         except OSError as e:
             raise Exception("%s [%d]" % (e.strerror, e.errno))
 
         os.setsid()
         """
-        fork again to make sure the daemon is not session leader, 
+        fork again to make sure the daemon is not session leader,
         which prevents it from acquiring controlling terminal
         """
         try:
@@ -317,11 +317,18 @@ class PRServSingleton(object):
 
 class PRServerConnection(object):
     def __init__(self, host, port):
+        scheme = "http"
+        _ = host.split("://")
+        if len(_) > 2 or len(_) < 1:
+            raise Exception("Invalid format for host/scheme pair, expected [<scheme>://]<host>")
+        if len(_) == 2:
+            scheme, host = _
         if is_local_special(host, port):
             host, port = singleton.getinfo()
         self.host = host
         self.port = port
-        self.connection, self.transport = bb.server.xmlrpcclient._create_server(self.host, self.port)
+        self.scheme = scheme
+        self.connection, self.transport = bb.server.xmlrpcclient._create_server(self.scheme, self.host, self.port)
 
     def terminate(self):
         try:
@@ -436,7 +443,7 @@ def is_running(pid):
     return True
 
 def is_local_special(host, port):
-    if host.strip().upper() == 'localhost'.upper() and (not port):
+    if host.split("://")[-1].strip().upper() == 'localhost'.upper() and (not port):
         return True
     else:
         return False
@@ -447,7 +454,7 @@ class PRServiceConfigError(Exception):
 def auto_start(d):
     global singleton
 
-    host_params = list(filter(None, (d.getVar('PRSERV_HOST') or '').split(':')))
+    host_params = list(filter(None, (d.getVar('PRSERV_HOST') or '').rsplit(':', 1)))
     if not host_params:
         # Shutdown any existing PR Server
         auto_shutdown()
@@ -457,7 +464,7 @@ def auto_start(d):
         # Shutdown any existing PR Server
         auto_shutdown()
         logger.critical('\n'.join(['PRSERV_HOST: incorrect format',
-                'Usage: PRSERV_HOST = "<hostname>:<port>"']))
+                'Usage: PRSERV_HOST = "[<scheme>://]<hostname>:<port>"']))
         raise PRServiceConfigError
 
     if is_local_special(host_params[0], int(host_params[1])):
@@ -470,8 +477,8 @@ def auto_start(d):
         logfile = os.path.join(cachedir, "prserv.log")
         if singleton:
             if singleton.dbfile != dbfile:
-               # Shutdown any existing PR Server as doesn't match config
-               auto_shutdown()
+                # Shutdown any existing PR Server as doesn't match config
+                auto_shutdown()
         if not singleton:
             bb.utils.mkdirhier(cachedir)
             singleton = PRServSingleton(os.path.abspath(dbfile), os.path.abspath(logfile), ("localhost",0))
@@ -487,7 +494,7 @@ def auto_start(d):
         connection.ping()
         realhost, realport = connection.getinfo()
         return str(realhost) + ":" + str(realport)
-        
+
     except Exception:
         logger.critical("PRservice %s:%d not available" % (host, port))
         raise PRServiceConfigError
diff --git a/bitbake/lib/toaster/bldcontrol/bbcontroller.py b/bitbake/lib/toaster/bldcontrol/bbcontroller.py
index 71c288df34..a76ffc1c9a 100644
--- a/bitbake/lib/toaster/bldcontrol/bbcontroller.py
+++ b/bitbake/lib/toaster/bldcontrol/bbcontroller.py
@@ -22,8 +22,7 @@ class BitbakeController(object):
 
     def __init__(self, be):
         import bb.server.xmlrpcclient
-        self.connection = bb.server.xmlrpcclient._create_server(be.bbaddress,
-                                                          int(be.bbport))[0]
+        self.connection = bb.server.xmlrpcclient._create_server("http", be.bbaddress, int(be.bbport))[0]
 
     def _runCommand(self, command):
         result, error = self.connection.runCommand(command)
diff --git a/meta/lib/oe/prservice.py b/meta/lib/oe/prservice.py
index fcdbe66c19..96ed1ea7e1 100644
--- a/meta/lib/oe/prservice.py
+++ b/meta/lib/oe/prservice.py
@@ -4,7 +4,7 @@
 
 def prserv_make_conn(d, check = False):
     import prserv.serv
-    host_params = list([_f for _f in (d.getVar("PRSERV_HOST") or '').split(':') if _f])
+    host_params = list([_f for _f in (d.getVar("PRSERV_HOST") or '').rsplit(':', 1) if _f])
     try:
         conn = None
         conn = prserv.serv.PRServerConnection(host_params[0], int(host_params[1]))
@@ -116,7 +116,7 @@ def prserv_export_tofile(d, metainfo, datainfo, lockdown, nomax=False):
     bb.utils.unlockfile(lf)
 
 def prserv_check_avail(d):
-    host_params = list([_f for _f in (d.getVar("PRSERV_HOST") or '').split(':') if _f])
+    host_params = list([_f for _f in (d.getVar("PRSERV_HOST") or '').rsplit(':', 1) if _f])
     try:
         if len(host_params) != 2:
             raise TypeError
-- 
2.34.1

